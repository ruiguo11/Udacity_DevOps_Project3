version: 2.1
orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
      
      
    steps:
      - run:
          name: Destroy environments << parameters.workflow_id >>
          command: |
            # Your code here
            echo "Destryping environment: << parameters.workflow_id >>"
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            - aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            - aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
          when: on_fail
              

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: ~/project/backend

      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            
            SUCCESS = curl -H "Content-Type: text/plain" -H "token: 80a49aa9-e9ef-4519-9b7e-c1809da27d04" --request GET --data https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            if(( $SUCCESS==1 )); 
            then
              cd backend
              npm install
              # Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
              
            fi
          when: on_fail
            
jobs:
  build-frontend:
    environment:
      CODE: 123
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            # exit 1
            cd frontend
            echo $CODE
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build


  build-backend:
    environment:
      CODE: 124
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             # exit 1
             cd backend
             echo $CODE
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
       - checkout
       - restore_cache:
          keys: [frontend-test]
       - run:
          name: frontend test
          command: |
            cd frontend
            npm install oauth-sign
            npm install
            npm run test
       - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test

                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: backend test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit --audit-level=critical --force
      - save_cache:
          paths: [front/node_modules]
          key: frontend-scan



  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      # Restore from cache
      # Your job code here
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan
          


  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLIcli
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:10}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:10}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:10}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:10}" 
           
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            # exit 1
             aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:10}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >>.circleci/ansible/inventory.txt
              
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:10}"
          
  
           
  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11

    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["10:76:49:4e:63:db:7f:dc:24:09:b5:e7:fc:0e:4e:a4"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            ansible-playbook -i iventory.txt configure-server.yml
      
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:10}"
       
  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
    
      - run:
          name: Run migrations
          command: |
            # Your code here
            #exit 1
            cd backend
            npm install
            
            echo TYPEORM_CONNECTION=postgres >> /.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> /.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> /.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> /.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> /.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> /.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> /.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> /.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> /.env
            
            
                                        
            npm run migrations > migration.txt
            
            
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            # exit 1
            cd backend
            echo "Send migration results to memstash"
            curl -H "Content-Type: text/plain" -H "token: 80a49aa9-e9ef-4519-9b7e-c1809da27d04" --request PUT --data https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            
     # Here's where you will add some code to rollback on failure
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:10}"

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
       - image: python.3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: alpine:latest
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code configure-infrastructure
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      # Docker image here
      - image: cimg/base:2020.01
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
